open System
open System.Windows.Forms
open System.Drawing

type planet(Name, dt: float, dStart, dEnd) =
    
    //sets the name of the object
    let nameFromFileName (s: string) =
        s.[0..((String.length s)-5)]
    let name = nameFromFileName Name

    //function to read from one of the files and put data
    //from starting point to end point in a list 
    let read_file fileName dStart dEnd = 
        let reader =
            try 
                Some (System.IO.File.OpenText fileName)
            with
                _-> None
        let mutable list = []
        if reader.IsSome && dEnd > dStart then
            let stream = Option.get (reader)
            let mutable junk = ""
            let mutable stop = false
            while not(stop) do
                junk <- (stream.ReadLine())
                if junk.Length <> 0 then
                    if junk.[0] = '$' then
                        stop <- true
            for i = 2439126 to dStart-1 do
                junk <- (stream.ReadLine())
            for i = dStart to dEnd do
                list <- list@[(stream.ReadLine())]
        else
            printfn "could not open %s, or start i lower than end" fileName
            for i = (dStart+1) to dEnd do 
                list <- list@[""]
        list

    //converts angles and length of the data from the files, to cartesian cordinates
    let convertFileListToVector (list: string list) =
        let mutable (vectors: (float*float*float) list) = []
        if (String.length list.[0]) = 0 then  
            vectors <- vectors@[(0.00001,0.00001,0.00001)]
        for string in list do
            if (String.length string) = 0 then
                vectors <- vectors@[(0.0,0.0,0.0)]
            else
                let a = float(string.[22..31])
                let b = float(string.[33..39])
                let r = float(string.[40..55])
                let pi = System.Math.PI
                vectors <- vectors@[(r * cos((b*pi)/180.0) * sin((a*pi)/180.0), r * cos((b*pi)/180.0) * cos((a*pi)/180.0), r * sin((b*pi)/180.0))]
        vectors
    
    //create the JPL Emphemeris vectors
    let NASA_positions = convertFileListToVector (read_file Name dStart dEnd)

    //set start position
    let mutable position = NASA_positions.[0]
    //set amount of iteration
    let dT = dt
    //set start acceleration
    let mutable acceleration = (0.0,0.0,0.0)

    //set the start velocity
    let setStartVelocity v1 v2 =
        let (x1: float, y1: float, z1: float) = v1
        let (x2: float, y2: float, z2: float) = v2
        ((x2-x1),(y2-y1),(z2-z1))

    //setting start velocity
    let mutable velocity = (setStartVelocity NASA_positions.[0] NASA_positions.[1])

        //calculate the length of af vector
    let v_length v= 
        let (x,y,z) = v
        sqrt ((x*x)+(y*y)+(z*z))
    
    //update acceleration
    let setAcceleration i=
        let GM_solen = 0.0002959122082322128
        let r_3 = (v_length position) * (v_length position) * (v_length position)
        let (x,y,z) = position
        let x_a = -((GM_solen)/(r_3)*x)
        let y_a = -((GM_solen)/(r_3)*y)
        let z_a = -((GM_solen)/(r_3)*z)
        (x_a,y_a,z_a) 
        
    //update velocity
    let setVelocity i= 
        let (vx : float,vy : float,vz : float) = velocity
        let (ax : float,ay : float,az : float) = acceleration
        let x = vx + ax * (1.0/dT)
        let y = vy + ay * (1.0/dT)
        let z = vz + az * (1.0/dT)
        (x,y,z)

    //update position
    let setPosition i=
        let (vx : float,vy : float,vz : float) = velocity
        let (px : float,py : float,pz : float) = position
        let x = px + vx * (1.0/dT)
        let y = py + vy * (1.0/dT)
        let z = pz + vz * (1.0/dT)
        (x,y,z)

    //update all
    let update i =
        acceleration <- setAcceleration i 
        position <- setPosition i 
        velocity <- setVelocity i

    //calculate simulated positions
    let calculatePositions=
        let mutable list = [NASA_positions.[0]]
        for i = 0 to ((dEnd-dStart-1)*int(dT)) do
            update i
            if i % int(dT) = 0 then
                list <- list@[position]
                if i % 10000 = 0 then
                    printfn "%s has done %d of the %d calculations needed" name i ((dEnd-dStart-1)*int(dT))
        printfn "all %s calculations are done" name
        list

    //set calculated positions
    let calculatedPositions = calculatePositions

    //finds the euclidean difference between two vectors
    let checkVectorDifference v1 v2 =
        let (x1: float ,y1: float ,z1: float) = v1
        let (x2: float,y2: float,z2: float) = v2
        sqrt (((x2-x1) * (x2-x1)) + ((y2-y1) * (y2-y1)) + ((z2-z1) * (z2-z1)))

    //create list off euclidan differences
    let calculateDifference = 
        let mutable newList = []
        for i = 0 to (List.length calculatedPositions)-1 do
            newList <- newList@[(checkVectorDifference NASA_positions.[i] calculatedPositions.[i])]
        newList
    
    //set list of difference
    let euclideanDifference = calculateDifference


    member this.getPositions =
        calculatedPositions

    member this.getNASAPositions =
        NASA_positions

    member this.getEuclideanDifference =
        euclideanDifference

    member this.getName =
        name


//start and stop point for the data
let dataStart = 2439126
let dataEnd = 2457753

///<summary>
///getStartAndStop spørger om to datoer som er inden for datasættes rækkevide
///<returns>
///funktionen returnere en tuple med to tal som passer til datasættet
///</returns> 
let getStartAndStop = 
    let DataDateStart = DateTime.Parse("01-01-1966")
    let DataDateEnd = DateTime.Parse("12-31-2016")
    let mutable startDate  = DateTime.Parse("01-01-2001")
    let mutable endDate  = DateTime.Parse("01-01-2002")
    printfn "Denne simulation kan simulere fra 01-01-1966 til 12-31-2016"
    printfn "Her skal måneden indtastest før datoen"
    let mutable stop = false
    while not(stop) do
        printfn "Indtast datoen hvorfra simulationen skal starte?"
        startDate <- DateTime.Parse(System.Console.ReadLine())
        if startDate < DataDateStart || startDate > DataDateEnd then
            printfn "Dette er udenfor tidsrammen"
        else
            stop <- true
    stop <- false
    while not(stop) do
        printfn "Hvilken dato skal den slutte ved?"
        endDate <- DateTime.Parse(System.Console.ReadLine())
        if endDate < DataDateStart || endDate > DataDateEnd || endDate <= startDate then
            printfn "Dette er udenfor tidsrammen"
        else
            stop <- true
    let simStart = startDate.Subtract(DataDateStart).Days + dataStart
    let simEnd = endDate.Subtract(startDate).Days + simStart
    (simStart,simEnd)

//set start and stop
let (simStart,simEnd) = getStartAndStop

///<summary>
///getDtAndScale spørger brugeren om hvor mange iterationer 
///der skal laves per dag samt om det skal illustreres med den rigtige afstand
///<returns>
///funktionen returnere en tuple med iterationerne og om der skal være scale
///</returns> 
///<remarks>
///Funktionen har ikke nogen sikkerhed hvis brugere skulle taste forkert.
///</remarks>
let getDtAndScale =
    printfn "Hvor mange itterationer skal der laves per dag?"
    let dT = float(System.Console.ReadLine())
    printfn "Skal planeterne være i rigtigt størrelsesforhold?"
    let answ = System.Console.ReadLine().ToLower()
    let mutable scale = true
    if answ.[0] <> 'n' then
        scale <- false
    (dT,scale)

//set iterator and if it needs to be scaled 
let (dT,scale) =getDtAndScale            
    
//opret planeterne
let mercury = planet("Mercury.txt", dT, simStart, simEnd)
let venus = planet("Venus.txt", dT, simStart, simEnd)
let earth = planet("Earth.txt", dT, simStart, simEnd)
let mars = planet("Mars.txt", dT, simStart, simEnd)
let jupiter = planet("jupiter.txt", dT, simStart, simEnd)
let saturn = planet("Saturn.txt", dT, simStart, simEnd)
let uranus = planet("Uranus.txt", dT, simStart, simEnd)
let neptune = planet("Neptune.txt", dT, simStart, simEnd)
let pluto = planet("Pluto.txt", dT, simStart, simEnd)
let planetList = [mercury; venus; earth; mars; jupiter; saturn; uranus; neptune; pluto]

///<summary>
///writeToFile laver en fil og skriver den euklidiske afstand mellem
///JPL og den simulerede position
let writeToFile = 
    printfn "Printing results to planetOutput.txt"
    let output = System.IO.File.CreateText "planetOutput.txt"
    output.WriteLine "Her er hver tal, forskellen mellem den simulerede position og JPL Ephemeris data."
    output.WriteLine "Alle afstanden er målt i AU"
    output.WriteLine "Dato\tMercury\t\t\t\tVenus\t\t\t\tEarth\t\t\t\tMars\t\t\t\tJupiter\t\t\t\tSaturn\t\t\t\tUranus\t\t\t\tNeptune\t\t\t\tPluto"
    let date = simStart
    for i = 0 to (List.length planetList.[0].getEuclideanDifference)-1 do
        let mutable s = [string(date)]
        for j = 0 to (List.length planetList)-1 do
            s <- s@["\t"]
            let number = sprintf "%.16f"  planetList.[j].getEuclideanDifference.[i]
            s <- s@[string(number)]
        output.WriteLine (System.String.Concat(s))

///<summary>
///pToP (position to point) tager x og y koordinaterne fra punktet
///point og bruger dem til at lave to koordinater til skærmen
///<params name="point">
///point er punktet som skal laves om
///</params>
///<params name="d">
///d er en float, der skal bruges til at gange med,
///hvis der ikke skal være den rigtige afstand mellem planeterne
///</params>
///<returns>
///funktionen returnere en 2d koordinat
///</returns> 
///<remarks>
///Funktionen bruger den globale variabel scale, til endte at sætte 
///koordinaterne til den rigtige afstand eller en ny afstand
///hvor der ca er samme afstand mellem planeterne
///</remarks>
let pToP (point: (float*float*float)) d =
    let (x,y,z) = point
    if scale then
        (int(round(x*d))+400, int(round(y*d))+400)
    else
        (int(round(x*10.0))+400, int(round(y*10.0))+400)

///<summary>
///makeBlendedList tager en liste af lister og laver om på listen
///så den nye liste kommer til at indholde lister, som det første
///index i den først liste, andet index i liste 2 osv.
///f.eks. [[1;2;3];[4;5;6]] bliver til [[1;4];[2;5];[3;6]]
///<params name="L">
///Listen der skal laves om
///</params>
///<returns>
///funktionen returnere en ny liste
///</returns> 
let makeBlendedList (L: (float*float*float) list list) =
    let mutable returnList = []
    for i = 0 to (List.length (L.[0]))-1 do
        let mutable tempList = []
        for j = 0 to (List.length L)-1 do
            tempList <- tempList@[L.[j].[i]]
        returnList <- returnList@[tempList] 
    returnList

let mutable planets = makeBlendedList [mercury.getPositions; venus.getPositions; earth.getPositions; mars.getPositions; jupiter.getPositions; saturn.getPositions; uranus.getPositions; neptune.getPositions; pluto.getPositions]
let pens = [(Color.Red,93.02);(Color.Blue, 111.11);(Color.Green, 120.0);(Color.Yellow, 115.94);(Color.Magenta, 39.06);(Color.Cyan, 24.90);(Color.Lavender, 15.31);(Color.Tan, 10.56);(Color.DarkOrange, 11.08);]

///<summary>
///removeFirst fjerner det første element fra list
///<params name="list">
///list er en liste, hvis element skal fjernes
///</params>
///<returns>
///funktionen returnere en ny liste
///</returns> 
let removeFirst (list: (float*float*float) list list )=
    match list with
    | x::xs -> xs
    | _ -> []

///<summary>
///getFirst tager det første element fra list2 og sætter det over i list1
///</summary>
///<params name="list1">
///list1 er listen der skal have et nyt punkt
///</params>
///<params name="list2">
///list2 er listen der skal tages fra
///</params>
///<remarks>
///Funktionen tager det først element fra list2, men fra dette element
///bliver hver af dens 9 elementer sat bagerst i hver af list1's 
///9 lister  
///</remarks>

let getFirst (list1: (int*int) list list byref) (list2: (float*float*float) list list byref)=
    if (List.length list2) <> 0 then
        let newPoints = list2.[0]
        let mutable newList = []
        for i = 0 to (List.length list1)-1 do
            let (c,d) = pens.[i]
            newList <- newList@[list1.[i]@[(pToP newPoints.[i] d)]]
        list2 <- removeFirst list2
        list1 <- newList

///<summary>
///initPoints tager de to først koordinater fra planet listen og
///tilføjer dem til listen som skal tegnes, da mindst to punkter
///skal bruge for at tegne en linie
///</summary>
///<params name="list">
///list er listen af planeter vektore
///</params>
///<returns>
///funktionen returnere en liste af de punkter som skal tegnes
///</returns>       
let initPoints (list: (float*float*float) list list byref) =
    let mutable newList = []
    for i = 0 to 8 do
        let (c,d) = pens.[i]
        newList <- newList@[[(pToP list.[0].[i] d);(pToP list.[1].[i] d)]]
    list <- removeFirst list
    list <- removeFirst list
    newList

let mutable (points: (int*int) list list) = (initPoints &planets)

///<summary>
///make lave en ny form og sætter størrelsen, baggrunds farven og paint
///</summary>
///<params name="draw">
///draw er den paint funktion der skal bruges til tegne med
///</params>
///<returns>
///funktionen returnere en form
///</returns>
let make draw = 
    let win = new Form ()
    win.BackColor <- Color.Black
    win.ClientSize <- Size (800, 800)
    win.Paint.Add draw
    win
 
///<summary>
///drawPoint tegner en liste af punkter til ud på skærmen
///</summary>
///<params name="points">
///points er en liste af punkter der skal tegnes
///</params>
///<params name="e">
///e er et PaintEventArgs
///</params>
///<remarks>
///Funktionen bruger den globale list pens til at give hver planet
///en farve, og den globale variabel til at sætte størrelsen på pen
///</remarks>
let drawPoint (points: (int*int) list list byref) (e : PaintEventArgs)=
    let mutable i = 0
    let pairToPoint p = System.Drawing.Point (fst p, snd p)
    for p in points do
        let (c,d) = pens.[i]
        let mutable penWidth = 0.0
        if scale then
            penWidth <- 4.0
        else
            penWidth <- 1.0
        let pen = new Pen(c, single penWidth)
        let (po: System.Drawing.Point array) = Array.map pairToPoint (List.toArray p)
        i <- i + 1
        e.Graphics.DrawLines (pen, po)

let timer = new Timer ()
timer.Interval <- 10
timer.Enabled <- true

///<summary>
///updatePoints funktionen updatere en form og tilføjer nye pointer listen
///samtidig tjekker den om listen af punkter den tar fra er tom,
/// og hvis stopper den timeren
///</summary>
///<params name="form">
///form er den winForm der er kørende
///</params>
///<params name="points">
///list af punkter der skal tegnes
///</params>
///<params name="planets">
///liste af planterne vektor efter hvilken dag det er
///</params>
let updatePoints (form: Form) (points: (int*int) list list byref) (planets: (float*float*float) list list byref) showtime=
    getFirst &points &planets
    if (List.length planets) = 0 then
        timer.Enabled <- false
        printfn "stopping"
    form.Refresh ()


let win = make (drawPoint &points)

timer.Tick.Add (updatePoints win &points &planets)

Application.Run win 
